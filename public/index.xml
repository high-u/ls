<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ls</title>
    <link>/</link>
    <description>Recent content on ls</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Jul 2020 10:34:27 +0900</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript で中心点と半径から多角形の頂点を算出する</title>
      <link>/posts/calculate-polygon-with-js/</link>
      <pubDate>Sat, 11 Jul 2020 10:34:27 +0900</pubDate>
      
      <guid>/posts/calculate-polygon-with-js/</guid>
      <description>六角形と二十四角形  この記事を参考にさせてもらいました。  中心点、半径から正六角形と正二十四角形の座標を算出 | エンジニアの雑記 ～androidとかjava辺りの開発とか～   今回の目的は、算出だけだけど、数値だけ見せられても分からないので、svg で描画もした。 ここに置いた。  CalculatePolygonWithJs - CodeSandbox    hexagon(); polygon24(); function hexagon() { const p = document.getElementById(&amp;#34;hexagon&amp;#34;); const pointsString = convertPointsToString(getPolygonPoints(6, 50, 100, 100)); p.setAttribute(&amp;#34;points&amp;#34;, pointsString); } function polygon24() { const p = document.getElementById(&amp;#34;polygon24&amp;#34;); const pointsString = convertPointsToString( getPolygonPoints(24, 50, 100, 100) ); p.setAttribute(&amp;#34;points&amp;#34;, pointsString); } /** * ポリゴンの頂点を二次元配列で取得する * @param {n} num - 頂点の数（六角形なら `6`） * @param {r} num - 半径 * @param {x} num - 中心点 x * @param {y} num - 中心点 y */ function getPolygonPoints(n, r, x, y) { const angle = Math.</description>
    </item>
    
    <item>
      <title>javascript のラインチャートライブラリをいくつく見てみた</title>
      <link>/posts/linechart-libraries/</link>
      <pubDate>Fri, 03 Jul 2020 00:36:00 +0900</pubDate>
      
      <guid>/posts/linechart-libraries/</guid>
      <description>C3.js と Billboard.js  下記は Billboard.js を利用した。C3.js も可能。  &amp;lt;body&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script src=&amp;#34;https://d3js.org/d3.v5.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/billboard.js/2.0.0-next.7/billboard.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/billboard.js/2.0.0-next.7/billboard.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;timeseries&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; var chart = bb.generate({ data: { x: &amp;#39;x&amp;#39;, xFormat: &amp;#39;%Y-%m-%dT%H:%M:%S.%LZ&amp;#39;, // columns: [  // [  // &amp;#39;x&amp;#39;,  // &amp;#39;2013-01-01T00:00:00.000Z&amp;#39;,  // &amp;#39;2013-01-01T02:02:00.000Z&amp;#39;,  // &amp;#39;2013-01-01T04:04:00.000Z&amp;#39;,  // &amp;#39;2013-01-01T08:08:00.000Z&amp;#39;,  // &amp;#39;2013-01-01T16:16:00.000Z&amp;#39;  // ],  // [&amp;#39;data1&amp;#39;, 30, 200, 100, 400, 150],  // [&amp;#39;data2&amp;#39;, 130, 340, 200, 500, 250]  // ]  rows: [ [&amp;#34;x&amp;#34;, &amp;#34;data1&amp;#34;, &amp;#34;data2&amp;#34;], [&amp;#34;2013-01-01T00:00:00.</description>
    </item>
    
    <item>
      <title>データベースをデプロイする</title>
      <link>/posts/deploy-databases/</link>
      <pubDate>Sat, 13 Jun 2020 10:19:16 +0900</pubDate>
      
      <guid>/posts/deploy-databases/</guid>
      <description>PostgreSQL Docker  https://hub.docker.com/_/postgres  docker run -d --rm --name pg -e POSTGRES_PASSWORD=password postgres:12.3 docker exec -it pg psql -U postgres Docker Compose version: &amp;#39;3.1&amp;#39; services: db: image: postgres:12.3 restart: always ports: - &amp;#34;5432:5432&amp;#34; environment: POSTGRES_PASSWORD: password PGDATA: /var/lib/postgresql/data/pgdata volumes: - pg-data:/var/lib/postgresql/data adminer: image: adminer restart: always ports: - 8080:8080 volumes: pg-data: docker-compose up -d open http://localhost:8080 # # データベースの種類: PostgreSQL # サーバ: db # ユーザ名: postgres # パスワード: password # データベース: # docker-compose down Kubernetes (with kind) </description>
    </item>
    
    <item>
      <title>ブログはじめる</title>
      <link>/posts/first-post/</link>
      <pubDate>Sat, 23 May 2020 15:07:43 +0900</pubDate>
      
      <guid>/posts/first-post/</guid>
      <description>HUGO にした 
インストール # https://gohugo.io/getting-started/quick-start/ brew install hugo hugo version hugo new site ls cd ls git init # hello-friend というテーマを導入 git submodule add https://github.com/panr/hugo-theme-hello-friend.git themes/hello-friend # ここを参照 https://github.com/panr/hugo-theme-hello-friend#how-to-configure vim config.toml # 記事作成 hugo new posts/first-post.md vim content/posts/first-post.md # サーバー起動 hugo server -D open http://localhost:1313 デプロイ先は vercel 
vercel の設定  Import Project から github のリポジトリを登録した。 設定は下記の様。FRAMEWORK PRESET に hugo があったが、 config.yaml を要求されて、とりあえず諦めた。   Hook を作成したら Copy する。  github の設定  Copy した URL を Payload URL に貼り付ける。  デプロイ hugo -D git add .</description>
    </item>
    
  </channel>
</rss>